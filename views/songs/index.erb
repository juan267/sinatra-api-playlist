<h1>Playlist</h1>


<h1>Add New Song with Ajax</h1>

<form id="song-form-new-ajax" action="/songs/new" method="post" class="song-form">
  <div class="form_field">
    <label for="song_title">Title</label>
    <input type="text" id="song_title" name="song[title]" value="" class="clearable"/>

    <div id="song_title_error" class="validation_error"></div>
  </div>
  <div class="form_field">
    <label for="song_artist">Artist</label>
    <input type="text" id="song_artist" name="song[artist]" value="" class="clearable"/>

    <div id="song_artist_error" class="validation_error"></div>
  </div>
  <div class="form_buttons">
    <input type="submit">
  </div>
</form>

<ul id="playlist-songs">
  <% @songs.each do |song| %>
      <li><a href="/song/<%= song.id %>"><%= song.title %></a> by <%= song.artist %></li>
  <% end %>
</ul>

<script>
    $(document).ready(function () {

        function PlaylistModel() {
            this.songs = [];
            this.callbacks = [];
            this.reload = function () {
                var playlist = this;
                var promise = $.ajax({
                    type: "GET",
                    url: '/api/v1/songs',
                    dataType: 'json'
                });
                promise.done(function (data) {
                    playlist.songs = data;
                    playlist.notifySubscribers();
                });
                promise.fail(function (data) {
                    debugger;
                    console.log(data);
                    console.log(playlist);
                });
            };

            this.addNewSong = function (options) {
                var playlist = this;
                var promise = $.ajax({
                    type: "POST",
                    url: '/api/v1/songs/new',
                    dataType: 'json',
                    data: options.data
                });

                promise.done(function (data) {
                            if (options.success) {
                                options.success();
                            }
                            playlist.reload();
                        }
                );

                promise.fail(function (response) {
                    var errors = response.responseJSON.errors;
                    console.log(errors); // show response from the php script.
                    if (options.errors) {
                        options.errors(errors);
                    }
                });


            };

            this.notifySubscribers = function () {
                for (var i = 0; i < this.callbacks.length; i++) {
                    this.callbacks[i](this);
                }
            };
            this.subscribe = function (subscriberFunction) {
                this.callbacks.push(subscriberFunction)
            };
        }

        function PlaylistView($container) {
            this.refresh = function (playlistModel) {
                $container.html('');
                for (var i = 0; i < playlistModel.songs.length; i++) {
                    var song = playlistModel.songs[i];
                    var $li = $('<li><a href="/song/' + song['id'] + '">' + song['title'] + '</a> by ' + song['artist'] + '</li>');
                    $container.append($li);
                }

            }
        }

        function SongFormView($form) {
            this.clearForm = function () {
                console.log("clear");
                $form.find('input.clearable').val('');
                $form.find('.validation_error').text('');
            };
            this.updateErrors = function (errors) {
                console.log("updateErrors");
                console.log(errors);
                $form.find('.validation_error').text('');
                for (var prop in errors) {
                    if (errors.hasOwnProperty(prop)) {
                        var message = errors[prop][0];
                        $form.find("#song_" + prop + "_error").text(message);
                    }
                }
            };

            this.bindSubmit = function (playListModel) {
                var formView = this;
                $form.submit(function (event) {
                    event.preventDefault();
                    playlistModel.addNewSong({
                        data: $form.serialize(),
                        success: formView.clearForm,
                        errors: formView.updateErrors
                    });
                });
            }

        }


        var playlistModel = new PlaylistModel();
        var playlistView = new PlaylistView($('#playlist-songs'));

        playlistModel.subscribe(function (playlist) {
            playlistView.refresh(playlist)
        });

        var songFormView = new SongFormView($('#song-form-new-ajax'));

        songFormView.bindSubmit(playlistModel);

    });
</script>